{"version":3,"sources":["apigee/errors/errorParser.js"],"names":["error","code","parameters","String","Error","statusCode","httpcode","language","errorMessage","developerMessage","userMessage","i","length","split","join","body","errorCode","parseInt","moreInfo"],"mappings":";;;;;kBAGwBA,K;;AAHxB;;AACA;;;;;;AAEe,SAASA,KAAT,CAAgBC,IAAhB,EAAsBC,UAAtB,EAAkC;AAC/C,MAAI,CAAC,0BAAQA,UAAR,CAAD,IAAwB,2BAASA,UAAT,CAA5B,EAAkD;AAChDA,iBAAa,CAACA,UAAD,CAAb;AACD;AACDA,eAAaA,cAAc,EAA3B;;AAEA,MAAIF,QAAQ,uBAAaG,OAAOF,IAAP,CAAb,CAAZ;AACA,MAAI,0BAAQD,KAAR,CAAJ,EAAoB;AAClB,UAAM,IAAII,KAAJ,CAAW,+BAA8BH,IAAK,aAA9C,CAAN;AACD;AACD,MAAII,aAAaL,MAAMM,QAAvB;;AAEA,MAAIC,WAAW,IAAf;AACA,MAAIC,eAAeR,MAAMO,QAAN,CAAnB;;AAEA,MAAI,0BAAQC,YAAR,CAAJ,EAA2B;AACzBD,eAAW,IAAX;AACAC,mBAAeR,MAAMO,QAAN,CAAf;AACD;;AAED,MAAI,0BAAQC,YAAR,CAAJ,EAA2B;AACzB,UAAM,IAAIJ,KAAJ,CAAW,mCAAkCG,QAAS,uBAAsBN,IAAK,EAAjF,CAAN;AACD;;AAED,MAAIQ,mBAAmBD,aAAaC,gBAApC;AACA,MAAIC,cAAcF,aAAaE,WAA/B;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,WAAWU,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1CF,uBAAmBA,iBAAiBI,KAAjB,CAAwB,IAAGF,CAAE,GAA7B,EAAiCG,IAAjC,CAAsCZ,WAAWS,CAAX,CAAtC,CAAnB;AACAD,kBAAcA,YAAYG,KAAZ,CAAmB,IAAGF,CAAE,GAAxB,EAA4BG,IAA5B,CAAiCZ,WAAWS,CAAX,CAAjC,CAAd;AACD;;AAEDF,qBAAmBA,iBAAiBI,KAAjB,CAAuB,cAAvB,EAAuCC,IAAvC,CAA4C,EAA5C,CAAnB;AACAJ,gBAAcA,YAAYG,KAAZ,CAAkB,cAAlB,EAAkCC,IAAlC,CAAuC,EAAvC,CAAd;;AAEA,SAAO;AACLT,gBAAYA,UADP;AAELU,UAAM;AACJN,wBAAkB,uBAAKA,gBAAL,CADd;AAEJC,mBAAa,uBAAKA,WAAL,CAFT;AAGJM,iBAAWC,SAAShB,IAAT,CAHP;AAIJiB,gBAAU;AAJN;AAFD,GAAP;AASD","file":"errorParser.js","sourcesContent":["import {isEmpty, isString, trim} from '../../helpers/jsonHelpers'\nimport errorCatalog from './errorCatalog'\n\nexport default function error (code, parameters) {\n  if (!isEmpty(parameters) && isString(parameters)) {\n    parameters = [parameters]\n  }\n  parameters = parameters || []\n\n  let error = errorCatalog[String(code)]\n  if (isEmpty(error)) {\n    throw new Error(`luizalabs-error: Error code ${code} not found!`)\n  }\n  let statusCode = error.httpcode\n\n  let language = 'en'\n  let errorMessage = error[language]\n\n  if (isEmpty(errorMessage)) {\n    language = 'en'\n    errorMessage = error[language]\n  }\n\n  if (isEmpty(errorMessage)) {\n    throw new Error(`luizalabs-error: Error language ${language} not found for code ${code}`)\n  }\n\n  let developerMessage = errorMessage.developerMessage\n  let userMessage = errorMessage.userMessage\n\n  for (var i = 0; i < parameters.length; i++) {\n    developerMessage = developerMessage.split(`{${i}}`).join(parameters[i])\n    userMessage = userMessage.split(`{${i}}`).join(parameters[i])\n  }\n\n  developerMessage = developerMessage.split(/[{]\\d{1,}[}]/).join('')\n  userMessage = userMessage.split(/[{]\\d{1,}[}]/).join('')\n\n  return {\n    statusCode: statusCode,\n    body: {\n      developerMessage: trim(developerMessage),\n      userMessage: trim(userMessage),\n      errorCode: parseInt(code),\n      moreInfo: 'http://www.developer.apiluiza.com.br/errors'\n    }\n  }\n}\n"]}